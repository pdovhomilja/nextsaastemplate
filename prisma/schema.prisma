// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma-client/app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  CONTRIBUTOR
  EDITOR
  MEDIA
  ADMIN
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
}

model User {
  id                    String                 @id @default(cuid())
  companyId             String                 @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  role                  UserRole               @default(USER)
  status                UserStatus             @default(PENDING)
  accounts              Account[]
  sessions              Session[]
  activity              ActivityLog[]
  createdAt             DateTime               @default(now())
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model ActivityLog {
  id          String       @id @default(cuid())
  userId      String
  type        ActivityType
  entityId    String
  entity      String
  entityEvent String
  createdAt   DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])
}

enum ActivityType {
  CREATE
  UPDATE
  DELETE
  LIKE
  COMMENT
}
